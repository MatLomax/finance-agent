---
description: Automated commit and release workflow for AI development agent
globs: ["scripts/**/*.sh", "package.json"]
alwaysApply: true
---

# AI Agent Automation Standards

## Automated Workflow Philosophy
- **Quality Gate Driven**: Only commit after all checks pass
- **Semantic Versioning**: Automatic version bumping based on change analysis
- **Comprehensive Documentation**: Auto-generated changelogs and release notes
- **GitHub Integration**: Automated releases with proper assets

## Commit Automation (`scripts/auto-commit.sh`)

### Pre-Commit Requirements
- **Quality Gate**: `npm run precommit` must pass (`./scripts/check.sh` - type check, lint, test, coverage, bundle size)
- **Staged Changes**: Files must be staged with `git add` before commit
- **Clean Working Directory**: No unstaged changes allowed

### Automatic Version Determination
```javascript
// Change analysis for semantic versioning
- **Major**: Breaking changes (rare, manual override only)
- **Minor**: New rule files, significant feature additions, global.mdc changes
- **Patch**: Bug fixes, documentation updates, small improvements
```

### Commit Message Format
```
feat: v{version} - AI agent automated commit

## Changes in v{version}
- Updated rule file: `filename.mdc`
- Updated project dependencies and configuration

### Quality Assurance
- âœ… All type checks passed
- âœ… All linting rules satisfied
- âœ… 100% test coverage maintained
- âœ… Bundle size within limits
- âœ… Educational documentation standards met

Automated commit by AI development agent following quality gate validation.
```

## Release Automation (`scripts/auto-release.sh`)

### Release Creation Process
1. **Version Validation**: Confirm version from package.json or .last-version
2. **Branch Verification**: Must be on main branch and up-to-date
3. **Git Tagging**: Create and push version tag
4. **GitHub Release**: Create release with comprehensive notes and assets

### Release Assets
- **Source Archive**: `minimal-agent-rules-v{version}.tar.gz`
- **Essential Files**: .cursor/, scripts/, package.json, tsconfig.json, README.md, .vscode/
- **Documentation**: Auto-generated release notes with changelog

### Release Notes Template
```markdown
# ðŸ¤– AI Agent Release v{version}

## Overview
Automated release created by AI development agent after successful quality gate validation.

## What's Changed
{auto-generated changelog from commit}

## Quality Assurance
- âœ… Type Safety: JSDoc + TypeScript type checking passed
- âœ… Code Quality: ESLint with zero warnings
- âœ… Testing: 100% test coverage maintained
- âœ… Performance: Bundle size < 20KB
- âœ… Architecture: Maximum 5 dependencies enforced
- âœ… Documentation: Educational comments validated

## Architecture Highlights
- Ultra-lightweight: < 15KB total bundle size
- Zero-build: Pure JavaScript ES2022+ with no transpilation
- Type-safe: JSDoc + TypeScript + TypeBox validation
- Educational: All code includes step-by-step explanations
- Automated: AI agent handles commits and releases
```

## AI Agent Workflow Integration

### Task Completion Sequence
1. **Development**: AI agent implements features/fixes
2. **Quality Gate**: Run `npm run precommit` - all checks must pass
3. **Stage Changes**: `git add` modified files
4. **Automated Commit**: `npm run commit` - version bump, commit, push
5. **Automated Release**: `npm run release` - GitHub release with assets
6. **Complete Workflow**: `npm run ship` - runs all steps in sequence

### Package.json Scripts
All automation scripts are defined in package.json:
- `npm run commit` - Automated commit with version bump
- `npm run release` - GitHub release creation
- `npm run ship` - Complete workflow (precommit + commit + release)

See package.json scripts section for implementation details.

## Error Handling and Validation

### Commit Script Validations
- **Staged Changes Required**: Exit if no staged changes
- **Quality Gate Enforcement**: Must pass precommit checks
- **Version Conflict Prevention**: Automatic version increment
- **Remote Sync**: Push changes immediately after commit

### Release Script Validations
- **Branch Verification**: Must be on main branch
- **Remote Sync Check**: Must be up-to-date with origin
- **Tag Conflict Prevention**: Check existing tags
- **Asset Generation**: Ensure all files included in release

## Security and Permissions
- **GitHub CLI Authentication**: Required for release creation
- **Repository Access**: Must have push permissions to main branch
- **Release Permissions**: Must have release creation permissions
- **Token Scopes**: Requires 'repo' and 'workflow' scopes

## Monitoring and Debugging
- **Colored Output**: Clear status indicators for all operations
- **Detailed Logging**: Comprehensive error messages and progress updates
- **File Cleanup**: Temporary files removed after operations
- **Version Tracking**: .last-version file for coordination between scripts