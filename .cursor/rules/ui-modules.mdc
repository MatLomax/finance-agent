---
description: UI creation and DOM manipulation modules with native web APIs
globs: ["src/**/*.js"]
---

# UI Module Standards

## Module Philosophy
- **Native Web APIs**: Use DOM, fetch, localStorage, CSS Custom Properties
- **No Framework Overhead**: Direct manipulation, event listeners, custom elements
- **Functional Composition**: Small, composable modules that work together
- **Web Standards**: Leverage platform capabilities, not abstractions

## Module Types

### UI Modules (`src/ui/`)
```javascript
// src/ui/transaction-card.js
/**
 * Creates a transaction card element for displaying financial transaction data.
 * 
 * This function generates a DOM element that represents a single financial
 * transaction in the user interface. Used throughout the finance agent
 * for consistent transaction display in lists, dashboards, and reports.
 * 
 * @param {Object} transaction - The transaction data object
 * @param {string} transaction.id - Unique transaction identifier (UUID format)
 * @param {number} transaction.amount - Transaction amount in cents (avoids floating-point errors)
 * @param {string} transaction.description - Human-readable transaction description
 * @returns {HTMLElement} A configured div element ready for DOM insertion
 * 
 * @example
 * const transaction = { id: 'abc-123', amount: 2500, description: 'Coffee purchase' };
 * const cardElement = createTransactionCard(transaction);
 * document.getElementById('transaction-list').appendChild(cardElement);
 */
export function createTransactionCard({ id, amount, description }) {
  // Create container element for the transaction card
  // Using div for semantic flexibility and CSS styling
  const card = document.createElement('div');
  
  // Apply CSS class for consistent styling across the application
  card.className = 'transaction-card';
  
  // Store transaction ID as data attribute for event handling
  // This allows click handlers to identify which transaction was interacted with
  card.dataset.id = id;
  
  // Build inner HTML structure
  // Using template literal for readability and maintainability
  card.innerHTML = `
    <span class="amount">${formatCurrency(amount)}</span>
    <span class="description">${description}</span>
  `;
  
  return card;
}
```

### State Modules (`src/state/`)
```javascript
// src/state/transactions.js
/**
 * Transaction state management using native browser APIs.
 * 
 * This module provides a lightweight state management solution for financial
 * transactions without requiring external libraries like Redux or Zustand.
 * Uses browser localStorage for persistence and a simple observer pattern
 * for reactive updates across the application.
 */

// Storage key for localStorage persistence
// Prefixed with app name to avoid conflicts with other applications
const STORAGE_KEY = 'finance_agent_transactions';

// In-memory transaction store
// Initialized from localStorage to restore previous session data
let transactions = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');

// Observer pattern: List of callback functions to notify on state changes
// Each subscriber will be called when transactions are added, updated, or deleted
let subscribers = [];

export function getTransactions() {
  return [...transactions]; // Return copy to prevent mutation
}

export function addTransaction(transaction) {
  transactions.push({ ...transaction, id: crypto.randomUUID() });
  saveAndNotify();
}

export function subscribe(callback) {
  subscribers.push(callback);
  return () => subscribers = subscribers.filter(sub => sub !== callback);
}

function saveAndNotify() {
  localStorage.setItem(STORAGE_KEY, JSON.stringify(transactions));
  subscribers.forEach(callback => callback(getTransactions()));
}
```

## File Structure
```
src/
├── ui/                    # UI creation modules
│   ├── __tests__/
│   ├── transaction-card.js
│   ├── modal.js
│   └── chart.js
├── state/                 # State management modules
│   ├── __tests__/
│   ├── transactions.js
│   └── user-preferences.js
├── utils/                 # General utilities
│   ├── __tests__/
│   ├── dom-helpers.js
│   └── formatters.js
└── pages/                 # Page modules (if using client-side routing)
    ├── dashboard.js
    └── settings.js
```

## DOM Manipulation Standards
```javascript
// ✅ Good: Clear, direct DOM manipulation
function updateBalance(amount) {
  const balanceEl = document.getElementById('balance');
  balanceEl.textContent = formatCurrency(amount);
  balanceEl.style.setProperty('--balance-color', amount >= 0 ? 'green' : 'red');
}

// ✅ Good: Event delegation for performance
document.addEventListener('click', (e) => {
  if (e.target.matches('.delete-btn')) {
    const transactionId = e.target.closest('.transaction-card').dataset.id;
    deleteTransaction(transactionId);
  }
});

// ❌ Avoid: Complex DOM queries or manipulation
// Keep it simple and readable
```

## CSS Integration
- Use CSS Custom Properties for theming
- CSS Modules or BEM methodology for styling
- Prefer CSS Grid/Flexbox over positioning
- No CSS-in-JS libraries

```css
/* transaction-card.css */
.transaction-card {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: var(--spacing-sm);
  padding: var(--spacing-md);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
}

.amount {
  font-weight: bold;
  color: var(--color-amount, currentColor);
}
```

## Performance Requirements
- **Module size**: < 2kb each (See MAX_MODULE_SIZE_KB in src/lib/consts.js)
- **Load time**: Lazy load non-critical modules
- **Memory**: Clean up event listeners and references
- **DOM updates**: Batch updates, avoid layout thrashing

## Testing Strategy
```javascript
// transaction-card.test.js
import { describe, it } from 'node:test';
import assert from 'node:assert';
import { createTransactionCard } from '../transaction-card.js';

describe('createTransactionCard', () => {
  it('should create card with correct data', () => {
    const transaction = {
      id: '123',
      amount: 50.00,
      description: 'Coffee'
    };
    
    const card = createTransactionCard(transaction);
    
    assert.strictEqual(card.dataset.id, '123');
    assert.strictEqual(card.querySelector('.amount').textContent, '$50.00');
    assert.strictEqual(card.querySelector('.description').textContent, 'Coffee');
  });
});
```

## Allowed Dependencies (Tree-Shakeable Imports Only)
- **lodash-es** (specific functions only): `import { debounce } from 'lodash-es'`
- **date-fns** (for date utilities): `import { format } from 'date-fns'`
- **TypeBox** (runtime validation): `import { Type } from '@sinclair/typebox'`
- **No UI libraries**: Build exactly what you need

### Bundle Size Impact (per function import)
- `debounce` from lodash-es: ~500B
- `format` from date-fns: ~1.5KB  
- `Type` from TypeBox: ~2KB
- See `APPROVED_LIBRARY_IMPORTS` in `src/lib/consts.js` for complete reference