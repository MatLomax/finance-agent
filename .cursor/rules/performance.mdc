---
description: Performance optimization rules for ultra-fast, lightweight finance agent
alwaysApply: true
---

# Performance Standards

## Bundle Size Constraints (Vanilla JS - Much Smaller!)
- **Total bundle**: < 15kb gzipped (no framework overhead!) (See MAX_BUNDLE_SIZE_KB in src/lib/consts.js)
- **Initial HTML + CSS + JS**: < 10kb gzipped
- **Module chunks**: < 2kb each (See MAX_MODULE_SIZE_KB in src/lib/consts.js)
- **Library functions**: < 500 bytes each

## Loading Performance (Native JS Advantage)
- **Time to Interactive**: < 300ms on 3G connection (See MAX_TTI_MS in src/lib/consts.js)
- **First Contentful Paint**: < 400ms (See MAX_FCP_MS in src/lib/consts.js)
- **Largest Contentful Paint**: < 600ms (See MAX_LCP_MS in src/lib/consts.js)
- **Cumulative Layout Shift**: < 0.05

## Runtime Performance (Native DOM Advantage)
- **Direct DOM updates**: No virtual DOM diffing overhead
- **Memory usage**: < 5MB heap size for typical usage
- **Main thread blocking**: No operations > 8ms (See MAX_MAIN_THREAD_BLOCKING_MS in src/lib/consts.js)
- **60fps**: Native CSS transitions and animations

## Optimization Techniques

### Code Splitting
```javascript
// Lazy load modules using dynamic imports
const dashboard = await import('./ui/dashboard.js');

// Lazy load utilities only when needed
const expensiveUtil = await import('./lib/expensive-calculation.js');
```

### Vanilla JS Optimizations
```javascript
// Cache expensive calculations
let cachedValue = null;
let lastData = null;

function getExpensiveValue(data) {
  if (data !== lastData) {
    cachedValue = calculateComplexValue(data);
    lastData = data;
  }
  return cachedValue;
}

// Efficient event delegation
document.addEventListener('click', (e) => {
  if (e.target.matches('.action-btn')) {
    handleAction(e.target.dataset.id);
  }
});

// Batch DOM updates
function batchUpdate(updates) {
  requestAnimationFrame(() => {
    updates.forEach(update => update());
  });
}
```

### Asset Optimization
- **Images**: Use WebP format, lazy load, responsive sizes
- **Fonts**: Use system fonts or preload critical font subsets
- **Icons**: Inline critical icons, lazy load others

### Network Optimization
- **HTTP/2**: Leverage multiplexing
- **Compression**: Gzip/Brotli for all text assets
- **Caching**: Aggressive caching for static assets
- **Preload**: Critical resources only

## Build Optimization

### Build Configuration (Minimal or None!)
```javascript
// Optional esbuild config for TypeScript compilation only
// esbuild.config.js
export default {
  entryPoints: ['src/main.js'],
  bundle: true,
  target: 'es2020',
  format: 'esm',
  minify: true,
  outdir: 'dist',
  splitting: true // For code splitting
};

// Alternative: No build step - use import maps
// index.html
<script type="importmap">
{
  "imports": {
    "lodash": "https://esm.sh/lodash-es@4.17.21"
  }
}
</script>
```

### Tree Shaking - Critical for Bundle Size
- **Use ES modules exclusively** for optimal tree-shaking
- **Never import entire libraries**: `import * as _ from 'lodash'` ❌
- **Use specific imports**: `import { debounce } from 'lodash-es'` ✅
- **Avoid default exports** (harder to tree-shake)
- **Use ES module versions**: `lodash-es` not `lodash`
- **Mark side-effect-free packages** in package.json

#### Optimal Import Patterns
```javascript
// ✅ GOOD: Tree-shakeable imports (minimal bundle impact)
import { Type } from '@sinclair/typebox';           // ~2KB
import { debounce } from 'lodash-es';               // ~500B
import { format } from 'date-fns';                 // ~1.5KB

// ❌ BAD: Imports entire library (massive bundle impact)
import _ from 'lodash';                             // ~70KB+
import * as TypeBox from '@sinclair/typebox';      // ~50KB+
import dateFns from 'date-fns';                    // ~200KB+

// ✅ GOOD: Multiple specific imports from same library
import { 
  debounce, 
  throttle, 
  isEqual 
} from 'lodash-es';                                 // ~1.7KB total

// ❌ BAD: Importing from main lodash (no tree-shaking)
import { debounce } from 'lodash';                  // Pulls entire library
```

#### Library-Specific Guidelines
- **TypeBox**: Always import from specific paths: `@sinclair/typebox/value`
- **Lodash**: Must use `lodash-es`, never `lodash`
- **Date-fns**: Excellent tree-shaking, import individual functions
- **Full reference**: See `APPROVED_LIBRARY_IMPORTS` in `src/lib/consts.js`

## Measurement and Monitoring

### Bundle Analysis
```bash
# Analyze bundle size and dependencies
npm run build:analyze

# Bundle size validation (automated)
npm run check  # Includes bundle size validation
```

### Performance Testing
```typescript
// Performance test example
import { performance } from 'perf_hooks';

it('should calculate interest in < 1ms', () => {
  const start = performance.now();
  calculateCompoundInterest(1000, 0.05, 10, 12);
  const duration = performance.now() - start;
  
  expect(duration).toBeLessThan(1);
});
```

### Runtime Monitoring
- Use React DevTools Profiler in development
- Monitor Core Web Vitals in production
- Track bundle size in CI/CD pipeline

## Dependency Management
- **Audit regularly**: `npm audit` and `bundlephobia.com`
- **Prefer small libraries**: < 10kb each
- **Tree-shakeable only**: ESM libraries with proper exports
- **No polyfills**: Target modern browsers only (ES2020+)

## Performance Budget
- Enforce bundle size limits in CI
- Fail builds that exceed performance thresholds
- Regular performance audits (weekly)
- Document all performance optimizations