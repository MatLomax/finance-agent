---
description: Fast, comprehensive testing strategy with Node.js native test runner
globs: ["**/*.test.js", "**/*.spec.js"]
---

# Testing Standards

## Testing Philosophy
- **Test behavior, not implementation**: Focus on what the code does, not how
- **Fast feedback loop**: All tests must run in < 2 seconds total (See MAX_FULL_TEST_SUITE_TIME_MS in src/lib/consts.js)
- **TDD mandatory**: Red → Green → Refactor cycle for all new features
- **100% coverage**: Every line must be covered by tests (See REQUIRED_TEST_COVERAGE_PERCENT in src/lib/consts.js)

## Framework Setup
- **Primary**: Node.js native test runner (zero dependencies)
- **DOM testing**: happy-dom for lightweight DOM simulation (only if DOM testing needed)
- **Assertions**: Built-in Node.js test assertions (no additional libraries)

## Test Organization

### File Structure
```
src/
├── lib/
│   ├── __tests__/
│   │   ├── calculate-interest.test.js
│   │   └── format-currency.test.js
├── ui/
│   ├── transaction-card/
│   │   ├── transaction-card.js
│   │   └── __tests__/
│   │       └── transaction-card.test.js
```

### Naming Convention
- Test files: `[module-name].test.js`
- Test descriptions: Use "should" statements
- Group related tests with `describe` blocks

## Test Patterns

### Unit Tests (src/lib functions)
```javascript
import { describe, it } from 'node:test';
import assert from 'node:assert';
import { calculateCompoundInterest } from '../calculate-interest.js';

describe('calculateCompoundInterest', () => {
  it('should calculate simple compound interest correctly', () => {
    const result = calculateCompoundInterest(1000, 0.05, 1, 1);
    assert.ok(Math.abs(result - 1050) < 0.01, 'Result should be close to 1050');
  });

  it('should handle zero interest rate', () => {
    const result = calculateCompoundInterest(1000, 0, 5, 12);
    assert.strictEqual(result, 1000);
  });

  it('should throw error for negative principal', () => {
    assert.throws(
      () => calculateCompoundInterest(-100, 0.05, 1, 1),
      /Principal must be positive/
    );
  });
});
```

### DOM Module Tests
```javascript
import { describe, it } from 'node:test';
import assert from 'node:assert';
import { JSDOM } from 'jsdom'; // Only if DOM testing needed
import { createTransactionCard } from '../transaction-card.js';

// Setup DOM environment for testing (only if needed)
const { window } = new JSDOM('<!DOCTYPE html><html><body></body></html>');
global.document = window.document;

describe('createTransactionCard', () => {
  it('should create element with correct structure', () => {
    const transaction = { id: '123', amount: 50, description: 'Coffee' };
    const card = createTransactionCard(transaction);
    
    assert.strictEqual(card.tagName, 'DIV');
    assert.strictEqual(card.className, 'transaction-card');
    assert.strictEqual(card.dataset.id, '123');
  });

  it('should format amount correctly', () => {
    const transaction = { id: '123', amount: 1234.56, description: 'Test' };
    const card = createTransactionCard(transaction);
    
    assert.strictEqual(card.querySelector('.amount').textContent, '$1,234.56');
  });

  it('should handle click events', () => {
    const transaction = { id: '123', amount: 50, description: 'Coffee' };
    const card = createTransactionCard(transaction);
    
    let clicked = false;
    card.addEventListener('click', () => clicked = true);
    card.click();
    
    assert.strictEqual(clicked, true);
  });
});
```

## Performance Requirements
- **Test execution**: < 2 seconds for full suite (See MAX_FULL_TEST_SUITE_TIME_MS in src/lib/consts.js)
- **Single test**: < 50ms average (See MAX_INDIVIDUAL_TEST_TIME_MS in src/lib/consts.js)
- **Parallel execution**: Node.js test runner runs tests in parallel by default
- **No heavy setup**: Avoid unnecessary beforeEach/afterEach

## Coverage Standards
- **Branches**: 100%
- **Functions**: 100%
- **Lines**: 100%
- **Statements**: 100%
- **Exclude**: Only configuration files and type definitions

## Testing Anti-patterns
- ❌ Testing implementation details (CSS classes, internal state)
- ❌ Snapshot testing (brittle and maintenance-heavy)
- ❌ Testing external libraries
- ❌ Complex test setup that obscures intent
- ❌ Tests that take > 100ms to run

## Test Configuration
```bash
# Node.js native testing (zero dependencies)
# Run all tests:
npm run test

# Run tests with coverage (Node.js 20+):
npm run test:coverage

# Run tests in watch mode:
npm run test:watch

# All test scripts are defined in package.json
# See package.json scripts section for implementation details
```