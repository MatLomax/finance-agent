#!/usr/bin/env node

/**
 * TypeScript Migration Fix Script
 * 
 * Applies systematic fixes to resolve common TypeScript migration issues.
 */

const fs = require('fs');
const path = require('path');

// Common fixes to apply
const fixes = [
  // Fix missing return statements
  {
    pattern: /export function ([a-zA-Z_$][a-zA-Z0-9_$]*)\([^)]*\): ([a-zA-Z_$][a-zA-Z0-9_$<>|{}\[\],\s]*) \{/g,
    check: (content, match) => {
      const funcName = match[1];
      const returnType = match[2];
      
      // Skip if function already has return statement or is void
      if (returnType.includes('void') || content.includes(`return`) || returnType === 'any') {
        return null;
      }
      
      return { funcName, returnType };
    }
  },
  
  // Fix object return types  
  {
    pattern: /: object \{/g,
    replacement: ': any {'
  },
  
  // Fix missing type annotations
  {
    pattern: /let ([a-zA-Z_$][a-zA-Z0-9_$]*);/g,
    replacement: 'let $1: any;'
  },
  
  // Fix implicit any arrays
  {
    pattern: /const ([a-zA-Z_$][a-zA-Z0-9_$]*) = \[\];/g,
    replacement: 'const $1: any[] = [];'
  }
];

function applyFixes(filePath) {
  console.log(`Fixing ${filePath}...`);
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;
  
  // Apply pattern-based fixes
  fixes.forEach(fix => {
    if (fix.pattern && fix.replacement) {
      const newContent = content.replace(fix.pattern, fix.replacement);
      if (newContent !== content) {
        content = newContent;
        modified = true;
      }
    }
  });
  
  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`  ✅ Applied fixes to ${filePath}`);
  }
}

// Get all TypeScript files
function getAllTSFiles(dir, allFiles = []) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      getAllTSFiles(fullPath, allFiles);
    } else if (file.endsWith('.ts') && !file.endsWith('.d.ts')) {
      allFiles.push(fullPath);
    }
  }
  
  return allFiles;
}

// Apply fixes
const tsFiles = getAllTSFiles('src');
console.log(`Found ${tsFiles.length} TypeScript files to fix...`);

tsFiles.forEach(applyFixes);

console.log('✅ TypeScript fixes applied!');
